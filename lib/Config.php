<?phpclass Config{    public $configXml = false;    public $localXml  = false;    public $layoutXml = false;    public function readXml($file)    {        $msg = array();        libxml_use_internal_errors(true);        $xml = simplexml_load_file($file);        // $xml = simplexml_load_string($myXMLStrData);        if ($xml === false) {            foreach (libxml_get_errors() as $error) {                $msg[] = $error->message;            }            return $msg;        }        return $xml;    }    public function isInstalled()    {        if (file_exists(_APPDIR . "local.xml")) {            return true;        }        return false;    }    public function configPrepare()    {        if ($this->configXml == false) {            $this->configXml = $this->readXml(_APPDIR . "config.xml");        }        return $this->configXml;    }    public function localPrepare()    {        if ($this->localXml == false) {            $this->localXml = $this->readXml(_APPDIR . "local.xml");        }        return $this->localXml;    }    public function layoutPrepare()    {        if ($this->layoutXml == false) {            $this->layoutXml = $this->readXml(_APPDIR . "config.xml");        }        return $this->layoutXml;    }    public function setData($var,$val,$variable = '')    {        global $_app_params;        if($variable != ''){            $_app_params[$variable][$var] = $val;        }        else{            $_app_params[$var] = $val;        }    }    public function getData($var,$variable = '')    {        global $_app_params;        if($variable != ''){            return isset($_app_params[$variable][$var]) ? $_app_params[$variable][$var] : false;        }        else{            return isset($_app_params[$var]) ? $_app_params[$var] :  false;        }    }    public static function resetApp()    {        unset($_SESSION);    }    public static function getParamsByType($type = 'get')    {        if ($type == 'post') {            return $_POST;        }        return $_GET;    }    public static function getParams()    {        global $_app_params;        if (isset($_app_params['params'])) {            return $_app_params['params'];        }        return array();    }    public static function getParam($param)    {        global $_app_params;        if (isset($_app_params['params'][$param])) {            return $_app_params['params'][$param];        }        return false;    }    public static function setParam($param, $val = null)    {        global $_app_params;        if ($val == null && isset($_app_params[$param])) {            unset($_app_params[$param]);        } else {            $_app_params[$param] = $val;        }    }    public static function getSession($sessionParam)    {        if (isset($_SESSION[$sessionParam])) {            return $_SESSION[$sessionParam];        }        return false;    }    public static function setSession($sessionParam, $val = null)    {        if ($val == null && isset($_SESSION[$sessionParam])) {            unset($_SESSION[$sessionParam]);        } else {            $_SESSION[$sessionParam] = $val;        }    }    public static function getUrl($params = array())    {        $url = self::getBaseUrl();        if ($params && count($params)) {            foreach ($params as $key => $val) {                $url .= $key . "/" . $val . "/";            }        }        return $url;    }    public static function getBaseUrl()    {        global $_app_params;        if ($_app_params['config']['area'] == 'adminhtml') {            return _BASEURL . _ADMIN_ROUTE_URL . "/";        }        return _BASEURL;    }    public static function getMediaUrl()    {        return _BASEURL . "media/";    }    public static function getSkinUrl()    {        return _BASEURL . self::$skinPath;    }    public static function printAppFilesStack()    {        global $app_start_time;        echo "<br/><br/><br/><br/><br/>";        $units = array('b', 'kb', 'mb', 'gb', 'tb', 'pb');        $memoryUsed = memory_get_usage();        debug("Memory usage: " . $memoryUsed . " bits, " . @round($memoryUsed / pow(1024,                        ($i = floor(log($memoryUsed, 1024)))                    ),                                                                  2                ) . ' ' . $units[$i]        );        // debug("Execution Order");        // debug(array_reverse(debug_backtrace()));        debug("Included files");        debug(get_included_files());        $time = microtime(true) - $app_start_time;        debug("Page generation time: " . $time . " seconds");    }}