<?php/** * SLIM_MVC_Framework * * @category  controllers * @package   SLIM_MVC_Framework * @copyright Copyright (c) 2014 (http://www.elamurugan.com/) * @author    Ela <nelamurugan@gmail.com> *//** * Class SLIM_MVC_Framework * * @category    controllers * @package     SLIM_MVC_Framework */class Core extends XMLParser{    public static $__area   = '';    public        $__action = '';    public        $__module = '';    public $__appParams  = array();    public $__resultData = array();    public $configXml  = false;    public $localXml   = false;    public $layoutXml  = false;    public $dbDisabled = false;    public static $__dbHostname    = '';    public static $__dbUsername    = '';    public static $__dbPassword    = '';    public static $__dbName        = '';    public static $__dbTablePrefix = '';    public static $configData      = array();    public function _initDbSettings()    {        Helper::makeDir(_BASEDIR . "var/log/");        $this->configPrepare();        $this->localPrepare();        self::$__dbHostname = $this->getLocalXml("db/host");        self::$__dbUsername = $this->getLocalXml("db/user");        self::$__dbPassword = $this->getLocalXml("db/password");        self::$__dbName = $this->getLocalXml("db/db_name");        self::$__dbTablePrefix = $this->getLocalXml("db/table_prefix");    }    public function setData($var, $val, $variable = '')    {        if ($variable != '') {            $this->__resultData[$variable][$var] = $val;        } else {            $this->__resultData[$var] = $val;        }    }    public function getData($var, $variable = '')    {        if ($variable != '') {            return isset($this->__resultData[$variable][$var]) ? $this->__resultData[$variable][$var] : false;        } else {            return isset($this->__resultData[$var]) ? $this->__resultData[$var] : false;        }    }    public static function getParamsByType($type = 'get')    {        if ($type == 'post') {            return $_POST;        }        return $_GET;    }    public function getParams()    {        if (isset($this->__appParams['params'])) {            return $this->__appParams['params'];        }        return array();    }    public function getParam($param)    {        if (isset($this->__appParams['params'][$param])) {            return $this->__appParams['params'][$param];        }        return false;    }    public function setParam($param, $val = null)    {        if ($val == null && isset($this->__appParams[$param])) {            unset($this->__appParams[$param]);        } else {            $this->__appParams[$param] = $val;        }    }    public static function getSession($sessionParam)    {        if (isset($_SESSION[$sessionParam])) {            return $_SESSION[$sessionParam];        }        return false;    }    public static function setSession($sessionParam, $val = null)    {        if ($val == null && isset($_SESSION[$sessionParam])) {            unset($_SESSION[$sessionParam]);        } else {            $_SESSION[$sessionParam] = $val;        }    }    public static function resetApp()    {        unset($_SESSION);    }    public static function getUrl($params = array())    {        $url = self::getBaseUrl();        if ($params && count($params)) {            foreach ($params as $key => $val) {                $url .= $key . "/" . $val . "/";            }        }        return $url;    }    public static function getBaseUrl()    {        $xmlObj = new XMLParser();        if (self::$__area == $xmlObj->getConfig('default/adminhtml/area')) {            return _BASEURL . parent::$adminRoutePath . "/";        }        return _BASEURL;    }    public static function getMediaUrl()    {        return _BASEURL . "media/";    }    public static function getSkinUrl()    {        return _BASEURL . self::$skinPath;    }    public function isAdminPath()    {        $xmlObj = new XMLParser();        if (self::$__area == $xmlObj->getConfig('default/adminhtml/area')) {            return true;        }        return false;    }    public static function printException($classFile, $msg)    {        $errorObj = new Error();        $errorObj->printError($classFile, $msg);    }    public static function printAppFilesStack()    {        global $appStartTime;        echo "<br/><br/><br/><br/><br/>";        $units = array('b', 'kb', 'mb', 'gb', 'tb', 'pb');        $memoryUsed = memory_get_usage();        debug("Memory usage: " . $memoryUsed . " bits, " . @round($memoryUsed / pow(1024,                        ($i = floor(log($memoryUsed, 1024)))                    ),                                                                  2                ) . ' ' . $units[$i]        );        // debug("Execution Order");        // debug(array_reverse(debug_backtrace()));        debug("Included files");        debug(get_included_files());//        debug("Parameters");//        debug(self::$__area);        $time = microtime(true) - $appStartTime;        debug("Page generation time: " . $time . " seconds");    }    public static function log($msg, $filename = 'exception.log')    {        $currentTime = @date('Y-m-d H:i:s');        $path = _BASEDIR . "var/log/" . $filename;        error_log($currentTime . ": " . $msg . "\n", 3, $path);    }}