<?phpclass Helper{    public static function clean_url($string)    {        $string = str_replace(' ', '-', trim(strip_tags($string))); // Replaces all spaces with hyphens.        $string = preg_replace('/[^A-Za-z0-9\-]/', '', $string); // Removes special chars.        return strtolower(preg_replace('/-+/', '-', $string)); // Replaces multiple hyphens with single one.    }			public static function makeDir($path,$recursive = false)    {		if (!is_dir($path)) {           mkdir($path, 0777);        }	}	    public static function generateRandomString($length = 20)    {        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';        $charactersLength = strlen($characters);        $randomString = '';        for ($i = 0; $i < $length; $i++) {            $randomString .= $characters[rand(0, $charactersLength - 1)];        }        return $randomString;    }    public static function compressCss($css, $image_path = '')    {        /* remove comments */        $content = preg_replace('!/\*[^*]*\*+([^/][^*]*\*+)*/!', '', $css);        /* remove tabs, spaces, newlines, etc. */        $content = str_replace(array("\r\n", "\r", "\n", "\t", '  ', '    ', '    '), '', $content);        // Clear out the line breaks        $content = str_replace('<br />', '', $content);        // Clear out bogus whitespace        $content = preg_replace('/\(\s+/', '(', $content);        $content = preg_replace('/\s+\)/', ')', $content);        // Clear out quotes        $content = preg_replace('/(?:\'|\")/', '', $content);        // Replaces repeating ../ patterns        $content = preg_replace('/(?:\.\.\/)+(.*?\))/', $image_path . '$1', $content);        // Prepend the path to lines that do not have a "//" anywhere        $content = preg_replace('/(url\((?!.*\/\/))/i', '$1' . $image_path, $content);        return $content;    }    public static function readCacheFile($file)    {        return json_decode(file_get_contents($file), true);    }    public static function updateCacheFile($file, $content)    {        return file_put_contents($file, json_encode($content));    }    public function sendEmail($from, $fromname, $to, $toname, $subject, $content, $cc = "", $ccname = "", $attach = "", $setFilename = "", $attachment_path = "")    {        $enable_app_notifications = 1;        if ($enable_app_notifications == 0) {            $to = "";        }        try {            // return mail("abc@gmail.com","My subject",$content);            $smtp_host = 'ssl://smtp.gmail.com';            $smtp_port = '465';            $smtp_username = 'abc@abc.com';            $smtp_password = 'Pass@123';            require_once 'lib/swift/swift_required.php';            $transport = Swift_SmtpTransport::newInstance($smtp_host, $smtp_port)->setUsername($smtp_username)                                            ->setPassword($smtp_password);            // $transport = Swift_SmtpTransport::newInstance($smtp_host, $smtp_port, 'ssl')->setUsername($smtp_username)->setPassword($smtp_password);            // $transport = Swift_MailTransport::newInstance();	// Normal Mail            $mailer = Swift_Mailer::newInstance($transport);  // Create the Mailer using your created Transport            $message = Swift_Message::newInstance($subject)                                    ->setFrom(array($from => $fromname))                                    ->setTo(array($to => $toname))                                    ->setBody($content, 'text/html');            if ($cc != "") {                $message->setCc(array($cc => $toname));            }            $attachments = explode(",", $attach);            $setFilenames = explode(",", $setFilename);            if (is_array($attachments) && count($attachments)) {                foreach ($attachments as $key => $attach) {                    $file_attach = "media" . $attachment_path . $attach;                    if ($attach != "" && file_exists($file_attach)) {                        $message->attach(Swift_Attachment::fromPath($file_attach)->setFilename($setFilenames[$key]));                    }                }            }            return $result = $mailer->send($message);        } catch (Exception $e) {            return $e->getMessage();        }    }}