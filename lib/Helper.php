<?php/** * SLIM_MVC_Framework * * @category  controllers * @package   SLIM_MVC_Framework * @copyright Copyright (c) 2014 (http://www.elamurugan.com/) * @author    Ela <nelamurugan@gmail.com> *//** * Class SLIM_MVC_Framework * * @category    controllers * @package     SLIM_MVC_Framework */class Helper extends Model{    public static function convertStringToUrlKey($string)    {        $string = str_replace(' ', '-', trim(strip_tags($string))); // Replaces all spaces with hyphens.        $string = preg_replace('/[^A-Za-z0-9\-]/', '', $string); // Removes special chars.        return strtolower(preg_replace('/-+/', '-', $string)); // Replaces multiple hyphens with single one.    }    public static function makeDir($path, $recursive = false)    {        if (!is_dir($path)) {            mkdir($path, 0777, $recursive);        }    }    public static function generateRandomString($length = 20)    {        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';        $charactersLength = strlen($characters);        $randomString = '';        for ($i = 0; $i < $length; $i++) {            $randomString .= $characters[rand(0, $charactersLength - 1)];        }        return $randomString;    }    public static function compressCss($css, $image_path = '')    {        /* remove comments */        $content = preg_replace('!/\*[^*]*\*+([^/][^*]*\*+)*/!', '', $css);        /* remove tabs, spaces, newlines, etc. */        $content = str_replace(array("\r\n", "\r", "\n", "\t", '  ', '    ', '    '), '', $content);        // Clear out the line breaks        $content = str_replace('<br />', '', $content);        // Clear out bogus whitespace        $content = preg_replace('/\(\s+/', '(', $content);        $content = preg_replace('/\s+\)/', ')', $content);        // Clear out quotes        $content = preg_replace('/(?:\'|\")/', '', $content);        // Replaces repeating ../ patterns        $content = preg_replace('/(?:\.\.\/)+(.*?\))/', $image_path . '$1', $content);        // Prepend the path to lines that do not have a "//" anywhere        $content = preg_replace('/(url\((?!.*\/\/))/i', '$1' . $image_path, $content);        return $content;    }    public function compressHtml($allHtml)    {        // Trim each line        $allHtml = preg_replace('/^\\s+|\\s+$/m', '', $allHtml);        // Remove HTML comments        $allHtml = preg_replace_callback('/<!--([\\s\\S]*?)-->/', array($this, '_commentCB'), $allHtml);        // Remove ws around block/undisplayed elements        $allHtml = preg_replace('/\\s+(<\\/?(?:area|base(?:font)?|blockquote|body'                                . '|caption|center|cite|col(?:group)?|dd|dir|div|dl|dt|fieldset|form'                                . '|frame(?:set)?|h[1-6]|head|hr|html|legend|li|link|map|menu|meta'                                . '|ol|opt(?:group|ion)|p|param|t(?:able|body|head|d|h||r|foot|itle)'                                . '|ul)\\b[^>]*>)/i',                                '$1',                                $allHtml        );        // Remove ws outside of all elements        $allHtml = preg_replace_callback('/>([^<]+)</', array($this, '_outsideTagCB'), $allHtml);        return $allHtml;    }    protected static function _outsideTagCB($m)    {        return '>' . preg_replace('/^\\s+|\\s+$/', ' ', $m[1]) . '<';    }    protected static function _commentCB($m)    {        return (0 === strpos($m[1], '[') || false !== strpos($m[1], '<![')) ? $m[0] : '';    }    public static function readCacheFile($file)    {        return json_decode(@file_get_contents($file), true);    }    public static function updateCacheFile($file, $content)    {        return @file_put_contents($file, json_encode($content));    }    public function sendEmail($from, $fromname, $to, $toname, $subject, $content, $cc = "", $ccname = "", $attach = "", $setFilename = "", $attachment_path = "")    {        if ($this->getConfig('default/enable_email') != '1') {            return false;        }        try {            require_once _BASEDIR.'lib/thirdparty/swift/swift_required.php';            $smtp_host = 'ssl://smtp.gmail.com';            $smtp_port = '465';            $smtp_username = 'abc@abc.com';            $smtp_password = 'Pass@123';            $transport = Swift_SmtpTransport::newInstance($smtp_host, $smtp_port)                                            ->setUsername($smtp_username)                                            ->setPassword($smtp_password);            // $transport = Swift_MailTransport::newInstance();	// Normal Mail            // Create the Mailer using your created Transport            $mailer = Swift_Mailer::newInstance($transport);            $message = Swift_Message::newInstance($subject)                                    ->setFrom(array($from => $fromname))                                    ->setTo(array($to => $toname))                                    ->setBody($content, 'text/html');            if ($cc != "") {                $message->setCc(array($cc => $ccname));            }            $attachments = explode(",", $attach);            $setFilenames = explode(",", $setFilename);            if (is_array($attachments) && count($attachments)) {                foreach ($attachments as $key => $attach) {                    $file_attach = $attachment_path . $attach;                    if ($attach != "" && file_exists($file_attach)) {                        $message->attach(Swift_Attachment::fromPath($file_attach)->setFilename($setFilenames[$key]));                    }                }            }            return $result = $mailer->send($message);        } catch (Exception $e) {            return $e->getMessage();        }    }}