<?php/** * SLIM_MVC_Framework * * @category  controllers * @package   SLIM_MVC_Framework * @copyright Copyright (c) 2014 (http://www.elamurugan.com/) * @author    Ela <nelamurugan@gmail.com> *//** * Class SLIM_MVC_Framework * * @category    controllers * @package     SLIM_MVC_Framework */class Model extends Core{    public $conn          = false;    public $executedQuery = false;    public $numberOfRows  = false;    public function Model()    {        $this->dbConnect();    }    public function dbConnect()    {        if (!$this->conn && $this->dbDisabled == false) {            $this->_initDbSettings();            $this->conn = @mysql_connect(parent::$__dbHostname, parent::$__dbUsername, parent::$__dbPassword);            if (!$this->conn) {                $msg = 'Not connected : ' . mysql_error()." Check with local.xml settings or reload db-install.sql  app/code/sql file";                $this->log($msg);                $this->printException(__FILE__, $msg);            }            $selectedDb = @mysql_select_db(parent::$__dbName, $this->conn);            if (!$selectedDb) {                $msg = ('DB ' . parent::$__dbName . ' cannot be used. ' . mysql_error())." Check with local.xml settings or reload db-install.sql from app/code/sql file";                $this->log($msg);                $this->printException(__FILE__, $msg);            }            $timeZone = $this->getSystemTimeZone();            $qry = 'SET time_zone = "' . $timeZone . '";';            $this->exec($qry);            $this->initConfigVariables();        }        return $this->conn;    }    public function exec($qry)    {        if (!$this->conn) {            $this->dbConnect();        }        $this->executedQuery = mysql_query($qry, $this->conn);        if (!$this->executedQuery) {            return mysql_error();        }        return $this->executedQuery;    }    public function insert($qry)    {        $result = $this->exec($qry);        if (!$result) {            return mysql_error();        }        $id = mysql_insert_id($this->conn);        return $id;    }    public function getNumberOfROws()    {        if (!$this->numberOfRows = @mysql_num_rows($this->executedQuery)) {            return mysql_error();        }        return $this->numberOfRows;    }    public function fetch($qry, $recordNo = null)    {        $result = $this->exec($qry);        $response = array();        if ($result && is_resource($result)) {            while ($row = mysql_fetch_assoc($result)) {                $response[] = $row;            }            if ($recordNo !== null) {                $response = @$response[$recordNo];            }        }        return $response;    }    public function fetchFirstRow($qry)    {        return $this->fetch($qry, 0);    }    public function getTable($table)    {        $table = parent::$__dbTablePrefix . "" . $this->getConfig('db/tables/' . $table);        return $table;    }    public function initConfigVariables()    {        $qry = "SELECT path,value FROM `{$this->getTable("config")}` ";        $result = $this->fetch($qry);        $config = array();        foreach ($result as $row) {            $config[$row['path']] = $row['value'];        }        Core::$configData = $config;    }    public function createConfigVariable($path, $value)    {        $qry = "update `config` set  value = '$value' where path = '$path'";        $result = $this->exec($qry);        $this->initConfigVariables();    }    public function updateConfigVariable($path, $value)    {        $qry = "update `{$this->getTable("config")}` set  value = '$value' where path = '$path'";        $this->exec($qry);        $this->initConfigVariables();    }    public function checkUrlRewriteAvailable($urlKey)    {        $qry = "SELECT * FROM `{$this->getTable("url_rewrites")}` where request_path = '$urlKey'";        $result = $this->fetchFirstRow($qry);        if (count($result)) {            return @explode("/", $result['target_path']);        }        return array();    }    public function checkUsernameExist($username)    {        $qry = "SELECT * FROM `{$this->getTable("users")}` where username = '$username'";        $result = $this->fetch($qry);        if (count($result)) {            return $result[0];        } else {            return false;        }    }    public function isUserLoggedIn()    {        return Template::getSession('user');    }    public function getLoggedInUser()    {        return Template::getSession('user');    }}