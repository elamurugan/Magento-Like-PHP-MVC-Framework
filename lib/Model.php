<?php/** * SLIM_MVC_Framework * * @category  controllers * @package   SLIM_MVC_Framework * @copyright Copyright (c) 2014 (http://www.elamurugan.com/) * @author    Ela <nelamurugan@gmail.com> *//** * Class SLIM_MVC_Framework * * @category    controllers * @package     SLIM_MVC_Framework */class Model extends Core{    public $conn                = false;    public $executedQuery       = false;    public $executedQueryString = '';    public $lastInsertId        = 0;    public $numberOfRows        = false;    public $resultSet;    public $resultSetType;    public function Model()    {        $this->dbConnect();    }    public function dbConnect()    {        if (!$this->conn && $this->dbDisabled == false) {            $this->_initDbSettings();            $this->conn = @mysql_connect(parent::$__dbHostname, parent::$__dbUsername, parent::$__dbPassword);            if (!$this->conn) {                $msg = 'Not connected : ' . mysql_error(                    ) . " Check with local.xml settings or reload db-install.sql  app/code/sql file";                $this->log($msg);                $this->printException(__FILE__, $msg);            }            $selectedDb = @mysql_select_db(parent::$__dbName, $this->conn);            if (!$selectedDb) {                $msg = ('DB ' . parent::$__dbName . ' cannot be used. ' . mysql_error(                        )) . " Check with local.xml settings or reload db-install.sql from app/code/sql file";                $this->log($msg);                $this->printException(__FILE__, $msg);            }            $timeZone = $this->getSystemTimeZone();            $qry = 'SET time_zone = "' . $timeZone . '";';            $this->exec($qry);            $this->initConfigVariables();        }        return $this->conn;    }    public function exec($qry)    {        if (!$this->conn) {            $this->dbConnect();        }        $this->executedQuery = mysql_query($qry, $this->conn);        $this->executedQueryString = $qry;        if (!$this->executedQuery) {            return mysql_error();        }        return $this->executedQuery;    }    public function getNumberOfROws()    {        if (!$this->numberOfRows = @mysql_num_rows($this->executedQuery)) {            return mysql_error();        }        return $this->numberOfRows;    }    public function getTable($table)    {        $table = parent::$__dbTablePrefix . "" . $this->getConfig('db/tables/' . $table);        return $table;    }    public function fetch($qry, $asObject = false, $recordNo = null)    {        $result = $this->exec($qry);        $response = array();        if ($result && is_resource($result)) {            if ($asObject) {                while ($row = mysql_fetch_object($result)) {                    $response[] = $row;                }            } else {                while ($row = mysql_fetch_assoc($result)) {                    $response[] = $row;                }            }            if ($recordNo !== null) {                $response = @$response[$recordNo];            }        }        $this->resultSet = $response;        return $this->resultSet;    }    /**     * @return array     */    public function getFirstItem()    {        if ($this->resultSet && count($this->resultSet)) {            return $this->resultSet[0];        }        return array();    }    /**     * @param        $table     * @param string $select     * @param string $conditions     * @param string $sort     * @param string $limit     * @param null   $recordNo     * @param bool   $asObject     * @return array     */    public function getCollection($table, $select = array(), $conditions = array(), $sort = array(), $limit = array(), $asObject = false, $recordNo = null)    {        $table = $this->getTable($table);        $result = array();        if ($table != '') {            $conditionStr = $selectStr = $sortStr = $limitStr = '';            if (!is_array($select) || count($select) == 0) {                $selectStr = ' * ';            } else {                foreach ($select as $column => $value) {                    if ($column != '' && !is_int($column)) {                        $selectStr .= " `$column` as '{$value}',";                    } else {                        $selectStr .= " {$value},";                    }                }                $selectStr = rtrim($selectStr, ",");            }            $qry = "select {$selectStr} from `{$table}` ";            if (is_array($conditions) && count($conditions) > 0) {                $conditionStr .= ' where ';                foreach ($conditions as $column => $value) {                    $conditionStr .= " `{$column}` = '{$value}' and";                }                $conditionStr = rtrim($conditionStr, "and");            } elseif (is_string($conditions) && $conditions != '') {                $conditionStr = " where   " . ((string)$conditions);            }            if (is_array($sort) && count($sort) > 0) {                foreach ($sort as $column => $value) {                    $sortStr = " {$column} {$value} ";                }                $sortStr .= ' order by ' . $sortStr;            }            if (is_array($limit) && count($limit) > 0) {                foreach ($limit as $column => $value) {                    $limitStr .= $value;                }                $sortStr .= ' limit ' . $sortStr;            }            $qry = $qry . $conditionStr . $sortStr . $limitStr;            $result = $this->fetch($qry, $asObject, $recordNo);        }        return $result;    }    /**     * @param       $table     * @param array $data     * @return int|string     */    public function insert($table, $data = array())    {        $table = $this->getTable($table);        if ($table != '' && is_array($data) && count($data)) {            $qry = "INSERT INTO   `{$table}`  ";            //            $columns = array_keys($data);            //            $values = array_values ($data);            $columns = ' (';            foreach ($data as $column => $value) {                //                $type = gettype($value);// If needs to be type casted                $columns .= " `{$column}`,";            }            $columns = rtrim($columns, ",") . ") ";            $values = ' values (';            foreach ($data as $column => $value) {                $values .= " '{$value}',";            }            $values = rtrim($values, ",") . ") ";            $qry = $qry . $columns . $values;            return $this->exec($qry);        }        $this->lastInsertId = mysql_insert_id($this->conn);        return $this->lastInsertId;    }    /**     * @param       $table     * @param array $data     * @param array $conditions     * @return int|string     */    public function update($table, $data = array(), $conditions = array())    {        $table = $this->getTable($table);        if ($table != '' && is_array($data) && count($data)) {            $qry = "update  `{$table}` set ";            $columns = "";            foreach ($data as $column => $value) {                $columns .= " `{$column}` = '{$value}',";            }            $columns = rtrim($columns, ",");            $qry = $qry . $columns;            if (is_array($conditions) && count($conditions)) {                $qry .= ' where ';                foreach ($conditions as $column => $value) {                    $qry .= " `{$column}` = '{$value}' and";                }                $qry = rtrim($qry, "and");            } elseif (is_string($conditions) && $conditions != '') {                $qry .= " where  " . (string)$conditions;            }            return $this->exec($qry);        }        return false;    }    /**     * @param       $table     * @param array $conditions     * @return int|string     */    public function delete($table, $conditions = array())    {        $table = $this->getTable($table);        if ($table != '') {            $qry = "delete from  `{$table}`  ";            $qry .= ' where ';            if (is_array($conditions) && count($conditions)) {                foreach ($conditions as $column => $value) {                    $qry .= " `{$column}` = '{$value}' and";                }            } elseif (is_string($conditions) && $conditions != '') {                $qry .= "   " . (string)$conditions;            }            $qry = rtrim($qry, "and");            return $this->exec($qry);        }        return false;    }    public function initConfigVariables()    {        $result = $this->getCollection("config", array("path" => "path", "value"));        $config = array();        foreach ($result as $row) {            $config[$row['path']] = $row['value'];        }        Core::$configData = $config;    }    public function createConfigVariable($path, $value)    {        // insert    }    public function updateConfigVariable($path, $value)    {        $qry = "update `{$this->getTable("config")}` set  value = '$value' where path = '$path'";        $this->exec($qry);        $this->initConfigVariables();    }    public function checkUrlRewriteAvailable($urlKey)    {        $result = $this->getCollection("url_rewrites", array(), array("request_path" => $urlKey));        if (count($result)) {            $result = $this->getFirstItem();            return @explode("/", $result['target_path']);        }        return array();    }    public function checkUsernameExist($username)    {        $result = $this->getCollection("users", array(), array("username" => $username));        if (count($result)) {            return $result[0];        } else {            return false;        }    }    public function isUserLoggedIn()    {        return Template::getSession('user');    }    public function getLoggedInUser()    {        return Template::getSession('user');    }}