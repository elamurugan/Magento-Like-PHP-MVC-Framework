<?phpclass Template extends Layout{    public $db       = false;    public $model    = false;    public $theme    = '';    public $template = false;    public static function clearCssJsCache($path = 'frontend')    {        $script = "rm -rf " . _BASEDIR . "var/cache/$path/*";        return system($script, $retval);    }    public function _templateInit()    {        $this->addHandle('default');        $this->configPrepare();        if ($this->theme == '') {            $this->theme = $this->getConfig('default/' . parent::$__area . '/theme');        }        if (parent::$cacheFolder == '') {            parent::$cacheFolder = $this->getConfig('path/var_cache');        }        if (parent::$skinBasePath == '') {            parent::$skinBasePath = $this->getConfig('path/skin');        }        $themePath = parent::$__area . "/" . $this->theme . "/";        parent::$skinPath = parent::$skinBasePath . "/" . $themePath;        parent::$themePath = _APPDIR . "design/" . $themePath;        parent::$templatePath = _APPDIR . "design/" . $themePath . "template/";        parent::$cacheUrl = parent::$cacheFolder . parent::$__area . "/";        parent::$cachePath = _BASEDIR . parent::$cacheUrl;        parent::$cacheJsonFile = parent::$cachePath . "cache.json";        if (!is_writable(_BASEDIR . parent::$cacheFolder)) {            $this->log("Please Check skin directory path is writable");        }    }    // For ajax kind of response    public function renderIntoString($resultParams = array())    {        ob_start();        $this->renderHtml($resultParams);        $_template_content = ob_get_contents();        ob_end_clean();        return $_template_content;    }    // For normal response    public function renderHtml($resultParams = array())    {        $this->prepareLayout();        if (count($resultParams)) {            foreach ($resultParams as $key => $resultParam) {                $this->setData($key,$resultParam);            }        }        $this->renderLayout();        if (parent::$configData['css_compress'] == 1 || parent::$configData['js_compress'] == 1) {            Helper::updateCacheFile(parent::$cacheJsonFile, parent::$cachedJson);        }        if ($this->getConfig('default/print_execution_order') == "1") {            parent::printAppFilesStack();        }    }    public function prepareXmlTemplates($type, $xmlChildObj, $xmlParentObj = false)    {        if ($xmlChildObj && $xmlChildObj->$type != null) {            foreach ($xmlChildObj->$type as $xmlNode) {                $name = $this->getXmlAttributeValue($xmlNode, 'name');                $parentName = '';                if ($xmlParentObj && is_a($xmlParentObj, 'SimpleXMLElement')) {                    $parentName = $this->getXmlAttributeValue($xmlParentObj, 'name');                }                $template = $this->getXmlAttributeValue($xmlNode, 'template');                $toHtml = (boolean)$this->getXmlAttributeValue($xmlNode, 'toHtml');                $this->templates[$name] = array("template" => $template, 'block' => $xmlNode, 'parent' => $parentName, 'toHtml' => $toHtml);                $this->prepareActionElements($xmlNode);                if ($xmlNode->$type != null) {                    $this->prepareXmlTemplates($type, $xmlNode, $xmlChildObj->$type);                }            }        }    }    public function updateXmlTemplates($type, $xmlObj)    {        if ($xmlObj && $xmlObj->$type != null) {            foreach ($xmlObj->$type as $xmlChildObj) {                $this->prepareActionElements($xmlChildObj);                if ($xmlChildObj->block != null) {                    $this->prepareXmlTemplates('block', $xmlChildObj, $xmlObj->$type);                }            }        }    }    public function prepareActionElements($xmlChildObj)    {        if ($xmlChildObj->action != null) {            $name = $this->getXmlAttributeValue($xmlChildObj, 'name');            foreach ($xmlChildObj->action as $actionObj) {                $actionStr = $this->getXmlAttributeValues($actionObj);                if (($template = (string)$actionStr->setTemplate) != null) {                    $this->setTemplate($name, $template);                } elseif (($addItemStr = (string)$actionStr->addItem) != null) {                    parent::addItem($actionStr);                }            }        }    }    public function prepareLayout()    {        $this->siteTitle = $this->getConfig('default/site_title');        $this->siteMetaKeywords = $this->getConfig('default/site_meta_keywords');        $this->siteMetaDescription = $this->getConfig('default/site_meta_description');        $layoutXmlPath = self::$themePath . "layout/" . $this->getConfig(parent::$__area . '/layout');        $this->layoutPrepare($layoutXmlPath);    }    public function renderLayout()    {        foreach ($this->handles as $handle) {            $xmlChildObj = $this->getLayoutXml($handle, true);            $this->prepareXmlTemplates('block', $xmlChildObj, $handle);        }        foreach ($this->handles as $handle) {            $xmlNode = $this->getLayoutXml($handle, true);            $this->updateXmlTemplates('reference', $xmlNode);        }        foreach ($this->templates as $templateName => $templateXmlObj) {            unset($this->templates[$templateName]['block']);        }        $this->getChildHtml('root');    }    public function getChildHtml($childName = '')    {        //        debug($childName);        //        debug(parent::$templatePath . $this->templates[$childName]['template']);        if (isset($this->templates[$childName]['template'])            && file_exists($tempFile = parent::$templatePath . $this->templates[$childName]['template'])        ) {            include_once($tempFile);        } elseif ($childName == '') {            //TODO            foreach ($this->templates as $templateObj) {            }        }    }    public function renderJs()    {        $mergedJsFileName = $html = '';        parent::$_jsFiles = array_unique(parent::$_jsFiles);        if (@parent::$configData['js_compress'] == 1 && is_writable(parent::$cacheFolder)) {            Helper::makeDir(parent::$cachePath, true);            $currentJsFiles['files'] = implode(",", parent::$_jsFiles);            if (file_exists(parent::$cacheJsonFile)) {                if (parent::$cachedJson === false) {                    parent::$cachedJson = Helper::readCacheFile(parent::$cacheJsonFile);                }                if (parent::$cachedJson && is_array(parent::$cachedJson) && isset(parent::$cachedJson['js'])) {                    foreach (parent::$cachedJson['js'] as $jsMergedFile) {                        if ($currentJsFiles['files'] == $jsMergedFile['files']) {                            $mergedJsFileName = $jsMergedFile['merged'];                        }                    }                }            }            if ($mergedJsFileName == '' || !file_exists(parent::$cachePath . $mergedJsFileName)) {                include_once(_BASEDIR . "lib/thirdparty/jsmin.php");                $mergedJsFileName = Helper::generateRandomString() . '.js';                $jsContents = '';                foreach (parent::$_jsFiles as $jsFile) {                    if (file_exists(_BASEDIR . parent::$skinPath . $jsFile)) {                        $jsContents .= file_get_contents(_BASEDIR . parent::$skinPath . $jsFile);                    }                }                $jsContents = JSMin::minify($jsContents);                $handle = fopen(parent::$cachePath . $mergedJsFileName, 'w');                fwrite($handle, $jsContents);                fclose($handle);                $currentJsFiles['merged'] = $mergedJsFileName;                parent::$cachedJson['js'][] = $currentJsFiles;            }            $html .= sprintf('<script type="text/javascript" src="%s"></script>' . "\n",                             _BASEURL . parent::$cacheUrl . $mergedJsFileName            );        } else {            foreach (parent::$_jsFiles as $jsFile) {                if (file_exists(_BASEDIR . parent::$skinPath . $jsFile)) {                    $html .= sprintf('<script type="text/javascript" src="%s"></script>' . "\n",                                     _BASEURL . parent::$skinPath . $jsFile                    );                }            }        }        return $html;    }    public function renderCss()    {        $mergedCssFileName = $html = '';        parent::$_cssFiles = array_unique(parent::$_cssFiles);        if (@parent::$configData['css_compress'] == 1 && is_writable(parent::$cacheFolder)) {            Helper::makeDir(parent::$cachePath, true);            $cssMergedFiles = array();            $currentCssFiles['files'] = implode(",", parent::$_cssFiles);            if (file_exists(parent::$cacheJsonFile)) {                if (parent::$cachedJson === false) {                    parent::$cachedJson = Helper::readCacheFile(parent::$cacheJsonFile);                }                $cssMergedFiles = parent::$cachedJson;                if (parent::$cachedJson && is_array(parent::$cachedJson) && isset(parent::$cachedJson['css'])) {                    foreach (parent::$cachedJson['css'] as $cssMergedFile) {                        if ($currentCssFiles['files'] == $cssMergedFile['files']) {                            $mergedCssFileName = $cssMergedFile['merged'];                        }                    }                }            }            if ($mergedCssFileName == '' || !file_exists(parent::$cachePath . $mergedCssFileName)) {                $mergedCssFileName = Helper::generateRandomString() . '.css';                $cssContents = '';                foreach (parent::$_cssFiles as $cssFile) {                    if (file_exists(_BASEDIR . parent::$skinPath . $cssFile)) {                        $cssContents .= file_get_contents(_BASEDIR . parent::$skinPath . $cssFile);                    }                }                $cssContents = Helper::compressCss($cssContents, _BASEURL . parent::$skinPath);                $handle = fopen(parent::$cachePath . $mergedCssFileName, 'w');                fwrite($handle, $cssContents);                fclose($handle);                $currentCssFiles['merged'] = $mergedCssFileName;                parent::$cachedJson['css'][] = $currentCssFiles;            }            $html .= sprintf('<link rel="stylesheet" type="text/css" href="%s"/>' . "\n",                             _BASEURL . parent::$cacheUrl . $mergedCssFileName            );        } else {            foreach (parent::$_cssFiles as $cssFile) {                if (file_exists(_BASEDIR . parent::$skinPath . $cssFile)) {                    $html .= sprintf('<link rel="stylesheet" type="text/css" href="%s"/>' . "\n",                                     _BASEURL . parent::$skinPath . $cssFile                    );                }            }        }        return $html;    }    public function getTheme()    {        return $this->theme;    }}